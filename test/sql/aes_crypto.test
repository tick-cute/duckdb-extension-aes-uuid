# name: test/sql/aes_crypto.test
# description: Test AES crypto extension functions
# group: [aes_crypto]

require aes_crypto

# Test OpenSSL version function
query I
SELECT aes_crypto_openssl_version('test');
----
AesCrypto test, OpenSSL version: OpenSSL 3.5.0 8 Apr 2025

# Test basic AES encryption/decryption
statement ok
CREATE TABLE test_vectors AS 
SELECT * FROM VALUES
    ('6ba7b8109dad11d180b400c04fd430c8', '01b9c1ae51b64f87934d9e0cf22a18c1', '12345678901234567890123456789012')
    AS t(namespace, id, key);

# Test encode function
query I
SELECT aes_crypto_encode(namespace, id, key) FROM test_vectors;
----
ERROR:INVALID_KEY_SIZE

# Test with proper 32-byte hex key (64 hex chars = 32 bytes)
statement ok
UPDATE test_vectors SET key = '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef';

# Test encode function with proper key
query I
SELECT aes_crypto_encode(namespace, id, key) FROM test_vectors;
----
88384538-b320-c23e-a9ba-fd8be2831c37-22be92ce-0011-e353-7daf-4a118c21fd28

# Test round-trip encode/decode
query I
WITH encoded AS (
    SELECT aes_crypto_encode(namespace, id, key) AS uuid_val, key 
    FROM test_vectors
)
SELECT aes_crypto_decode(uuid_val, key) FROM encoded;
----
6ba7b8109dad11d180b400c04fd430c801b9c1ae51b64f87934d9e0cf22a18c1

# Test AES functions directly  
query I
SELECT aes_crypto_encrypt('6ba7b8109dad11d180b400c04fd430c8', '01b9c1ae51b64f87934d9e0cf22a18c1', '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef');
----
88384538-b320-c23e-a9ba-fd8be2831c37-22be92ce-0011-e353-7daf-4a118c21fd28

# Test oversize detection
query I
SELECT aes_crypto_encode('', repeat('a', 68), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef');
----
ERROR:OVERSIZE

# Test encode_valid function produces valid UUID v4 (namespace+id)
query I
SELECT uuid_extract_version(aes_crypto_encode_valid('', hex('hello'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')::uuid);
----
4

# Test encode_valid consistency (deterministic)
query I
SELECT aes_crypto_encode_valid('', hex('test'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef') = aes_crypto_encode_valid('', hex('test'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef');
----
true

# Test version consistency across different inputs  
query III
SELECT 
    uuid_extract_version(aes_crypto_encode_valid('', hex('test1'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')::uuid),
    uuid_extract_version(aes_crypto_encode_valid('', hex('test2'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')::uuid),
    uuid_extract_version(aes_crypto_encode_valid('', hex('test3'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')::uuid);
----
4	4	4

# Test basic round-trip with namespace:hello
query I
WITH encoded AS (
    SELECT aes_crypto_encode('', hex('namespace:hello'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef') AS uuid_val
),
decoded AS (
    SELECT aes_crypto_decode(uuid_val, '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef') AS decoded_hex
    FROM encoded
)
SELECT unhex(substr(decoded_hex, 1, 20)) FROM decoded;
----
namespace:hello

# Test encode_valid_uuid / decode_valid_uuid (single payload)
query I
WITH encoded AS (
    SELECT aes_crypto_encode_valid_uuid(hex('namespace:hello'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef') AS uuid_val
),
decoded AS (
    SELECT aes_crypto_decode_valid_uuid(uuid_val, '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef') AS decoded_hex
    FROM encoded
)
SELECT unhex(substr(decoded_hex, 1, 20)) FROM decoded;
----
namespace:hello

# Validate UUID using DuckDB's UUID type and version extraction
query II
SELECT 
    try_cast(aes_crypto_encode_valid_uuid(hex('namespace:hello'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef') AS uuid) IS NOT NULL,
    uuid_extract_version(try_cast(aes_crypto_encode_valid_uuid(hex('namespace:hello'), '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef') AS uuid));
----
true	4